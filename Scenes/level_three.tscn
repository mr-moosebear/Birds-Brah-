[gd_scene load_steps=5 format=3 uid="uid://d2cpafu68n2px"]

[ext_resource type="Script" path="res://Objects/scroller.gd" id="1_hthfc"]
[ext_resource type="Texture2D" uid="uid://clo5220ux8b1j" path="res://Art/Backgrounds/3.png" id="2_m0glx"]
[ext_resource type="AudioStream" uid="uid://bwai2xkej0djw" path="res://Art/Sounds/ActandContemplate.ogg" id="3_yispx"]

[sub_resource type="GDScript" id="GDScript_full6"]
script/source = "extends BaseLevel

# Level 3:
# Permanently dodgable 40px laser spawns after 15,000 pts.
# Laser grows to 80 px after 80,000 pts
# Missiles spawn every 10 seconds.
# 1/10 chance to spawn pipe obstacle with force field.

var laser: Laser

func _ready():
	scroller = $Scroller

func _process(delta):
	if Global.score >= 80_000 && self.laser.height < 80:
		self.laser.set_height(clamp(self.laser.height + 40 * delta, 40, 80))

func _on_missile_timer_timeout():
	spawn_missile()

func on_score(_score):
	if lasers.size() < 1 && Global.score >= 15_000:
		self.laser = spawn_laser()
		self.laser.set_height(40)


func _on_obstacle_spawn_timer_timeout():
	Global.signal_bus.obstacle_spawn.emit(randi() % 10 == 0)
"

[node name="LevelThree" type="Node2D"]
script = SubResource("GDScript_full6")

[node name="Scroller" type="Node" parent="." node_paths=PackedStringArray("scroll_rect")]
script = ExtResource("1_hthfc")
scroll_rect = NodePath("BackgroundRect")
scroll_px_sec = 100.0

[node name="BackgroundRect" type="TextureRect" parent="Scroller"]
z_index = -2
anchors_preset = -1
anchor_left = -1.65278
anchor_right = -1.65278
offset_right = 2304.0
offset_bottom = 715.0
texture = ExtResource("2_m0glx")
stretch_mode = 1
metadata/_edit_use_anchors_ = true

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_yispx")
parameters/looping = true

[node name="MissileTimer" type="Timer" parent="."]
wait_time = 10.0
autostart = true

[node name="ObstacleSpawnTimer" type="Timer" parent="."]
autostart = true

[connection signal="timeout" from="MissileTimer" to="." method="_on_missile_timer_timeout"]
[connection signal="timeout" from="ObstacleSpawnTimer" to="." method="_on_obstacle_spawn_timer_timeout"]
